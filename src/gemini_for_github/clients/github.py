from collections.abc import Callable
from typing import Any

from github import Auth, Github

from gemini_for_github.errors.github import GithubClientCommentLimitError, GithubClientPRLimitError, GithubClientPRReviewLimitError
from gemini_for_github.shared.logging import BASE_LOGGER

logger = BASE_LOGGER.getChild("github")


class GitHubAPIClient:
    """Concrete implementation of GitHub API client using PyGithub."""

    def __init__(self, token: str, owner: str, repo: str):
        """Initialize the GitHub API client.

        Args:
            token: GitHub API token for authentication
        """
        auth = Auth.Token(token)
        self.github = Github(auth=auth)
        self.owner = owner
        self.repo = repo

        self.issue_comment_counter: int = 0
        self.pr_create_counter: int = 0
        self.pr_review_counter: int = 0
        self.issue_create_counter: int = 0

    def get_tools(self) -> dict[str, Callable]:
        """Get the tools available to the GitHub API client."""
        return {
            "get_pull_request_diff": self.get_pull_request_diff,
            "create_pr_review": self.create_pr_review,
            "get_issue_body": self.get_issue_body,
            "get_issue_comments": self.get_issue_comments,
            "create_issue_comment": self.create_issue_comment,
            "create_pull_request": self.create_pull_request,
        }

    def get_pull_request_diff(self, pull_number: int) -> str:
        """Get the diff for a pull request.

        Args:
            owner: Repository owner
            repo: Repository name
            pull_number: Pull request number

        Returns:
            String containing the diff
        """
        repository = self.github.get_repo(f"{self.owner}/{self.repo}")
        pull_request = repository.get_pull(pull_number)
        files = pull_request.get_files()
        return "\n".join(file.patch for file in files)

    def create_pr_review(self, pull_number: int, body: str, event: str = "COMMENT") -> dict[str, Any]:
        """Create a review on a pull request.

        Args:
            owner: Repository owner
            repo: Repository name
            pull_number: Pull request number
            body: Review body text
            event: Review event type (e.g., "COMMENT", "APPROVE", "REQUEST_CHANGES")

        Returns:
            Dictionary containing the review information
        """
        if self.pr_review_counter == 1:
            msg = "The model attempted to create more than one pull request review. The model is only allowed to create one pull request review per pull request. Stop."
            raise GithubClientPRReviewLimitError(msg)
        repository = self.github.get_repo(f"{self.owner}/{self.repo}")
        pull_request = repository.get_pull(pull_number)
        review = pull_request.create_review(body=body, event=event)
        self.pr_review_counter += 1
        return review.raw_data

    def get_issue_body(self, issue_number: int) -> str:
        """Get the body of an issue.

        Args:
            owner: Repository owner
            repo: Repository name
            issue_number: Issue number

        Returns:
            String containing the issue body
        """
        repository = self.github.get_repo(f"{self.owner}/{self.repo}")
        issue = repository.get_issue(issue_number)
        response = f"# {issue.title}\n\n{issue.body}"
        logger.debug(f"Issue body for issue {issue_number}: {response.strip()}")
        return response.strip()

    def get_issue_comments(self, issue_number: int) -> list[dict[str, Any]]:
        """Get all comments on an issue.

        Args:
            issue_number: Issue number

        Returns:
            List of dictionaries containing comment information
        """
        repository = self.github.get_repo(f"{self.owner}/{self.repo}")
        issue = repository.get_issue(issue_number)

        response = [comment.raw_data for comment in issue.get_comments()]
        logger.debug(f"Comments from issue {issue_number}: {response}")
        return response

    def create_issue_comment(self, issue_number: int, body: str) -> dict[str, Any]:
        """Create a comment on an issue.

        Args:
            issue_number: Issue number
            body: Comment body text

        Returns:
            Dictionary containing the comment information
        """

        body_suffix = "\n\nThis is an automated response generated by a GitHub Action."

        if self.issue_comment_counter == 1:
            msg = "The model attempted to create more than one comment. The model is only allowed to create one comment per issue. Stop."
            logger.error(msg)
            raise GithubClientCommentLimitError(msg)

        repository = self.github.get_repo(f"{self.owner}/{self.repo}")
        issue = repository.get_issue(issue_number)
        comment = issue.create_comment(body + body_suffix)
        self.issue_comment_counter += 1
        return comment.raw_data

    def create_pull_request(self, head_branch: str, base_branch: str, title: str, body: str) -> dict[str, Any]:
        """Create a pull request using PyGithub.

        Args:
            head_branch: The name of the branch where the changes were made.
            base_branch: The name of the branch to merge the changes into.
            title: The title of the pull request.
            body: The body description of the pull request.

        Returns:
            A dictionary containing information about the created pull request.
        """
        if self.pr_create_counter == 1:
            msg = "The model attempted to create more than one pull request. The model is only allowed to create one pull request per issue. Stop."
            raise GithubClientPRLimitError(msg)
        repository = self.github.get_repo(f"{self.owner}/{self.repo}")
        pull_request = repository.create_pull(title=title, body=body, head=head_branch, base=base_branch)
        self.pr_create_counter += 1
        return pull_request.raw_data
